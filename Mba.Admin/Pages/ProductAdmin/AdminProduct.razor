@using Core.Models.Entity
@using Core.Models.Repository
@inject IProductRepo _productRepo
@inject IConfiguration config
@inject NavigationManager _navigation
@page "/products"

<PageTitle>Products</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Products" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenDataGrid style="height: 800px" @ref="grid0" ColumnWidth="200px" AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30})
                            Data="@_products" TItem="Product"  RowSelect="@EditRow">
                <Columns>
                    <RadzenDataGridColumn TItem="Product" Property="Name" Title="Name">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Product" Property="ImageUrl" Title="Image Url">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Product" Property="CreatedBy" Title="Created By">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Product" Property="UpdatedBy" Title="Updated By">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Product" Property="CreatedDate" Title="Created Date">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Product" Property="UpdatedDate" Title="Updated Date">
                    </RadzenDataGridColumn>
                    @*Button*@
                    <RadzenDataGridColumn TItem="Product" Filterable="false" Sortable="false" Width="200px" TextAlign="TextAlign.Center">
                        <Template Context="product">
                            <RadzenButton Variant="Variant.Flat" Shade="Shade.Lighter" Click=@(args => OnClick(product.Id)) @onclick:stopPropagation="true" Text="Details" ButtonStyle="ButtonStyle.Primary" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Product" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                        <Template Context="product">

                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter" Variant="Variant.Flat"
                                          Click=@(args => GridDeleteButtonClick(args, product)) @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>

            </RadzenDataGrid>

        </RadzenColumn>
    </RadzenRow>
</RadzenStack>  

@code {
    [Inject]
    protected IJSRuntime JSRuntime { get; set; }

    [Inject]
    protected NavigationManager NavigationManager { get; set; }

    [Inject]
    protected DialogService DialogService { get; set; }

    [Inject]
    protected TooltipService TooltipService { get; set; }

    [Inject]
    protected ContextMenuService ContextMenuService { get; set; }

    [Inject]
    protected NotificationService NotificationService { get; set; }

    protected IEnumerable<Product> _products;

    protected RadzenDataGrid<Product> grid0;
    protected override async Task OnInitializedAsync()
    {
        _products = await _productRepo.GetAllProductAsync();
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddProduct>("Add Product", null);
        await grid0.Reload();
    }
    protected async Task EditRow(Product args)
    {
        await DialogService.OpenAsync<EditProduct>("Edit Product", new Dictionary<string, object> { { "Id", args.Id } });
        await grid0.Reload();
    }
    private void OnClick(int productId)
    {
        string param = "/products/"+ productId;
        _navigation.NavigateTo(param);
    }
    protected async Task GridDeleteButtonClick(MouseEventArgs args, Product product)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await _productRepo.DeleteProductAsync(product.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to delete Product"
                });
        }
    }
}


