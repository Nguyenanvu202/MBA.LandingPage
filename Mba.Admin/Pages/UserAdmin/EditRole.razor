@page "/edit-role"
@using Mba.Admin.Areas.Identity.Data
@using Mba.Admin.Areas.Identity.Service
@using Microsoft.AspNetCore.Identity
@inject RoleService _roleService
<PageTitle>Edit AspNetRole</PageTitle>

<RadzenColumn SizeMD=12>
    <RadzenAlert Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">Cannot save AspNetRole</RadzenAlert>
    <RadzenTemplateForm TItem="EditRoleViewModel" Data="@_role" Visible="@(_role != null)" Submit="@FormSubmit">
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Id" Component="Id" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@_role.Id" Name="Id" />
                <RadzenRequiredValidator Component="Id" Text="Id is required" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow style="margin-bottom: 1rem">
            <RadzenColumn SizeMD="3">
                <RadzenLabel Text="Name" Component="Name" style="width: 100%" />
            </RadzenColumn>
            <RadzenColumn SizeMD="9">
                <RadzenTextBox style="display: block; width: 100%" @bind-Value="@_role.RoleName" Name="Name" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenButton ButtonStyle="ButtonStyle.Primary" ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
            <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Variant="Variant.Flat" Click="@CancelButtonClick" />
        </RadzenStack>
    </RadzenTemplateForm>
</RadzenColumn>
@code {
    [Inject]
    protected IJSRuntime JSRuntime { get; set; }

    [Inject]
    protected NavigationManager NavigationManager { get; set; }

    [Inject]
    protected DialogService DialogService { get; set; }

    [Inject]
    protected TooltipService TooltipService { get; set; }

    [Inject]
    protected ContextMenuService ContextMenuService { get; set; }

    [Inject]
    protected NotificationService NotificationService { get; set; }

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _role = await _roleService.GetRoleByIdAsync(Id);
    }
    protected bool errorVisible;
    protected EditRoleViewModel _role;

    protected async Task FormSubmit()
    {
        try
        {
            await _roleService.UpdateRoleAsync(Id, _role);
            DialogService.Close(_role);
        }
        catch (Exception ex)
        {
            errorVisible = true;
        }
    }

    protected async Task CancelButtonClick(MouseEventArgs args)
    {
        DialogService.Close(null);
    }
}
