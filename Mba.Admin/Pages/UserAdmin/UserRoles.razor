@page "/user-roles"
@using Mba.Admin.Areas.Identity.Data
@using Mba.Admin.Areas.Identity.Service
@inject UserRoleService _userRoleService

<PageTitle>UserRoles</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="UserRoles" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn SizeMD=12>
            <RadzenDataGrid @ref="grid0" ColumnWidth="200px" AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30})
                            Data="@_userRoles" TItem="UserRoleViewModel" RowSelect="@EditRow">
                <Columns>
                    <RadzenDataGridColumn TItem="UserRoleViewModel" Property="UserName" Title="User">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="UserRoleViewModel" Property="RoleName" Title="Role">
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="UserRoleViewModel" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                        <Template Context="_userRoles">

                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                                          Shade="Shade.Lighter" Variant="Variant.Flat"
                                          Click=@(args => GridDeleteButtonClick(args, _userRoles)) @onclick:stopPropagation="true" />
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>

            </RadzenDataGrid>

        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    [Inject]
    protected IJSRuntime JSRuntime { get; set; }

    [Inject]
    protected NavigationManager NavigationManager { get; set; }

    [Inject]
    protected DialogService DialogService { get; set; }

    [Inject]
    protected TooltipService TooltipService { get; set; }

    [Inject]
    protected ContextMenuService ContextMenuService { get; set; }

    [Inject]
    protected NotificationService NotificationService { get; set; }


    protected IEnumerable<UserRoleViewModel> _userRoles;

    protected RadzenDataGrid<UserRoleViewModel> grid0;
    protected override async Task OnInitializedAsync()
    {
        _userRoles = await _userRoleService.GetAllUserRole();
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddUserRole>("Add AspNetUserRole", null);
        await grid0.Reload();
    }

    protected async Task EditRow(UserRoleViewModel args)
    {
        await DialogService.OpenAsync<EditUserRole>("Edit AspNetUserRole", new Dictionary<string, object> { { "UserName", args.UserName }, { "RoleName", args.RoleName } });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, UserRoleViewModel userRole)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await _userRoleService.DeleteRoleForUser(userRole);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = $"Error",
                    Detail = $"Unable to delete AspNetUserRole"
                });
        }
    }
}


