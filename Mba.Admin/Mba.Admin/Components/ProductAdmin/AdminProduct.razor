@page "/product"
@using Core.Models.Entity
@using Core.Models.Repository
@inject IProductRepo _productRepo
@inject IConfiguration config
<RadzenDataGrid style="height: 800px" @ref="grid0"  Data="@_products" AllowPaging="true" PageSize="4" PagerHorizontalAlign="HorizontalAlign.Center" TItem="Product" ColumnWidth="200px" 
RowSelect="@EditRow">
    <Columns>
        <RadzenDataGridColumn TItem="Product" Property="ClassName" Filterable="false" Title="Product" Frozen="true" Width="80px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Product" Property="Title" Title="Title" Frozen="true" Width="160px" TextAlign="TextAlign.Center">
            <Template Context="Product">
                <span style="white-space: normal;">@Product.Name</span>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="Product" Title="Image" Frozen="true" Sortable="false" Filterable="false" Width="150px" TextAlign="TextAlign.Center" >
            <Template Context="Product">
                @if (!string.IsNullOrEmpty(Product.ImageUrl))
                {
                    <RadzenImage Path="@Product.ImageUrl" style="width: 150px; height: 150px; object-fit: cover;" />
                }
                else
                {
                    <text>No Image</text>
                }
            </Template>
        </RadzenDataGridColumn>        



    </Columns>
</RadzenDataGrid>

@code {
    [Inject]
    protected IJSRuntime JSRuntime { get; set; }

    [Inject]
    protected NavigationManager NavigationManager { get; set; }

    [Inject]
    protected DialogService DialogService { get; set; }

    [Inject]
    protected TooltipService TooltipService { get; set; }

    [Inject]
    protected ContextMenuService ContextMenuService { get; set; }

    [Inject]
    protected NotificationService NotificationService { get; set; }



    protected IEnumerable<Product> _products;
    protected RadzenDataGrid<Product> grid0;
    protected override async Task OnInitializedAsync()
    {
        _products = await _productRepo.GetAllProductAsync();

    }


    protected async Task EditRow(Product args)
    {
        @*await DialogService.OpenAsync<EditSection>($"EditSection {args.Id}", new Dictionary<string, object> { { "Id", args.Id } });*@
    }

}
